import Carleson.CoverByBalls
import Mathlib.MeasureTheory.Measure.Haar.Basic

open MeasureTheory Measure NNReal ENNReal Metric
noncomputable section

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

/-! Question(F): should a space of homogeneous type extend `PseudoQuasiMetricSpace` or
`QuasiMetricSpace`? -/

/-- A space of homogeneous type.
Note(F): I added `ProperSpace` to the definition (which I think doesn't follow from the rest?)
and removed `SigmaFinite` (which follows from the rest).
Should we assume `volume ‚â† 0` / `IsOpenPosMeasure`? -/
class IsSpaceOfHomogeneousType (X : Type*) (A : outParam ‚Ñù‚â•0) [fact : Fact (1 ‚â§ A)] extends
  PseudoQuasiMetricSpace X A, MeasureSpace X, ProperSpace X, BorelSpace X,
  Regular (volume : Measure X) where
  volume_ball_two_le_same : ‚àÄ (x : X) r, volume (ball x (2 * r)) ‚â§ A * volume (ball x r)

export IsSpaceOfHomogeneousType (volume_ball_two_le_same)

variable {X : Type*} {A : ‚Ñù‚â•0} [fact : Fact (1 ‚â§ A)] [IsSpaceOfHomogeneousType X A]

example : ProperSpace X := by infer_instance
example : LocallyCompactSpace X := by infer_instance
example : CompleteSpace X := by infer_instance
example : SigmaCompactSpace X := by infer_instance
example : SigmaFinite (volume : Measure X) := by infer_instance

lemma volume_ball_four_le_same (x : X) (r : ‚Ñù) :
    volume (ball x (4 * r)) ‚â§ A ^ 2 * volume (ball x r) := by
  calc volume (ball x (4 * r))
      = volume (ball x (2 * (2 * r))) := by ring_nf
    _ ‚â§ A * volume (ball x (2 * r)) := by apply volume_ball_two_le_same
    _ ‚â§ A * (A * volume (ball x r)) := by gcongr; apply volume_ball_two_le_same
    _ = A ^ 2 * volume (ball x r) := by ring_nf; norm_cast; ring_nf


example (x : X) (r : ‚Ñù) : volume (ball x r) < ‚àû := measure_ball_lt_top

def As (A : ‚Ñù‚â•0) (s : ‚Ñù) : ‚Ñù‚â•0 :=
  A * 2 ^ ‚åäs‚åã‚Çä

/- Proof sketch: First do for powers of 2 by induction, then use monotonicity. -/
lemma volume_ball_le_same (x : X) {r r' s : ‚Ñù} (hs : r' ‚â§ s * r) :
    volume (ball x r') ‚â§ As A s * volume (ball x r) := by sorry

def Ad (A : ‚Ñù‚â•0) (s d : ‚Ñù) : ‚Ñù‚â•0 :=
  As A (A * (d + s))

lemma volume_ball_le_of_dist_le {x x' : X} {r r' s d : ‚Ñù}
  (hs : r' ‚â§ s * r) (hd : dist x x' ‚â§ d * r) :
    volume (ball x' r') ‚â§ Ad A s d * volume (ball x r) := by sorry

def Ai (A : ‚Ñù‚â•0) (s : ‚Ñù) : ‚Ñù‚â•0 := Ad A s s

lemma volume_ball_le_of_subset {x' x : X} {r r' s : ‚Ñù}
    (hs : r' ‚â§ s * r) (hr : ball x' r ‚äÜ ball x r') :
    volume (ball x (2 * r)) ‚â§ Ai A s * volume (ball x' r) := by sorry

def Ai2 (A : ‚Ñù‚â•0) : ‚Ñù‚â•0 := Ai A 2

lemma volume_ball_two_le_of_subset {x' x : X} {r : ‚Ñù} (hr : ball x' r ‚äÜ ball x (2 * r)) :
    volume (ball x (2 * r)) ‚â§ Ai2 A * volume (ball x' r) :=
  volume_ball_le_of_subset le_rfl hr

def Np (A : ‚Ñù‚â•0) (s : ‚Ñù) : ‚Ñï := ‚åäAd A (s * A + 2‚Åª¬π) s‚åã‚Çä

/- Proof sketch: take a ball of radius `r / (2 * A)` around each point in `s`.
These are disjoint, and are subsets of `ball x (r * (2 * A + 2‚Åª¬π))`. -/
lemma card_le_of_le_dist (x : X) {r r' s : ‚Ñù} (P : Set X) (hs : r' ‚â§ s * r) (hP : P ‚äÜ ball x r')
  (h2P : ‚àÄ x y, x ‚àà P ‚Üí y ‚àà P ‚Üí x ‚â† y ‚Üí r ‚â§ dist x y) : P.Finite ‚àß Nat.card P ‚â§ Np A s := by sorry

/- Proof sketch: take any maximal set `s` of points that are at least distance `r` apart.
By the previous lemma, you only need a bounded number of points.
-/
lemma ballsCoverBalls {r r' s : ‚Ñù} (hs : r' ‚â§ s * r) : BallsCoverBalls X r' r (Np A s) := by
  sorry

/- # Instances of spaces of homogeneous type -/

/- ‚Ñù^n is a space of homogenous type. -/
instance {Œπ : Type*} [Fintype Œπ] : IsSpaceOfHomogeneousType (Œπ ‚Üí ‚Ñù) 1 := sorry

/- Preferrably we prove that in this form. -/
instance {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] : IsSpaceOfHomogeneousType E 1 := by
  sorry

/- Maybe we can even generalize the field? (at least for `ùïú = ‚ÑÇ` as well) -/
def NormedSpace.isSpaceOfHomogeneousType {ùïú E : Type*} [NontriviallyNormedField ùïú]
    [NormedAddCommGroup E] [NormedSpace ùïú E] : IsSpaceOfHomogeneousType E 1 := sorry

/- todo: ‚Ñù^n with nonstandard metric: `dist x y = ‚àë i, |x i - y i| ^ Œ± i` for `Œ± i > 0` -/
