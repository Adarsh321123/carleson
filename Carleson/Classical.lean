import Carleson.Carleson
import Mathlib.Analysis.Fourier.AddCircle

/-! The classical version of Carleson's theorem.

For this we take `X = ‚Ñù`, `K x y := 1 / (x - y)` and `Œò = {linear functions}`.
-/

open MeasureTheory Measure NNReal Metric Complex Set TileStructure Function BigOperators Filter
open AddCircle Topology
open scoped ENNReal
noncomputable section

variable {T : ‚Ñù} {f : AddCircle T ‚Üí ‚ÑÇ} {Œµ : ‚Ñù} [Fact (0 < T)]


def partialFourierSum (f : AddCircle T ‚Üí ‚ÑÇ) (n : ‚Ñ§) (x : AddCircle T) : ‚ÑÇ :=
  ‚àë i in Finset.Icc (- n) n, fourierCoeff f i * fourier i x

theorem classical_carleson (hf : UniformContinuous f) (h2f : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ 1)
    (hŒµ : 0 < Œµ) :
    ‚àÉ (E : Set (AddCircle T)) (N‚ÇÄ : ‚Ñï), MeasurableSet E ‚àß haarAddCircle E ‚â§ .ofReal Œµ ‚àß
    ‚àÄ N x, N‚ÇÄ ‚â§ N ‚Üí x ‚àâ E ‚Üí ‚Äñf x - partialFourierSum f N x‚Äñ < Œµ := by
  sorry


theorem classical_carleson_pointwise (hf : UniformContinuous f) (h2f : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ 1) :
    ‚àÉ (E : Set (AddCircle T)) (N‚ÇÄ : ‚Ñï), MeasurableSet E ‚àß haarAddCircle E = 0 ‚àß
    ‚àÄ x, x ‚àâ E ‚Üí Tendsto (partialFourierSum f ¬∑ x) atTop (ùìù (f x)) := by
  sorry
