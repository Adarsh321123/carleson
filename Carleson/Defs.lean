import Carleson.HomogenousType

open MeasureTheory Measure NNReal ENNReal Metric
noncomputable section

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

/-- A quasi metric space with regular/`A`-Lipschitz distance. -/
class RegularQuasiMetricSpace (X : Type*) (A : outParam ‚Ñù‚â•0) [fact : Fact (1 ‚â§ A)] extends
    QuasiMetricSpace X A where
  abs_dist_sub_dist_le : ‚àÄ x y y' : X, |dist x y - dist x y'| ‚â§ A * dist y y'

variable {X : Type*} {A : ‚Ñù‚â•0} [fact : Fact (1 ‚â§ A)] [IsSpaceOfHomogenousType X A]
export IsSpaceOfHomogenousType (volume_ball_le)

section localOscillation

/-- The local oscillation of two functions. -/
def localOscillation (E : Set X) (f g : C(X, ‚ÑÇ)) : ‚Ñù :=
  ‚®Ü z : E √ó E, ‚Äñf z.1 - g z.1 - f z.2 + g z.2‚Äñ

variable {E : Set X} {f g : C(X, ‚ÑÇ)}

lemma localOscillation_nonneg : 0 ‚â§ localOscillation E f g := sorry

@[simps]
def nnlocalOscillation (E : Set X) (f g : C(X, ‚ÑÇ)) : ‚Ñù‚â•0 :=
  ‚ü®localOscillation E f g, localOscillation_nonneg‚ü©

def localOscillationBall (E : Set X) (f : C(X, ‚ÑÇ)) (r : ‚Ñù) : Set C(X, ‚ÑÇ) :=
  { g : C(X, ‚ÑÇ) | localOscillation E f g < r }

end localOscillation


/-- `s` can be covered by at most `N` balls with radius `r`. -/
class CoverByBalls {Œ± : Type*} (d : Œ± ‚Üí Œ± ‚Üí ‚Ñù) (s : Set Œ±) (N : ‚Ñï) (r : ‚Ñù) : Type _ where
  balls : Set Œ±
  balls_finite : Set.Finite balls
  card_balls : Nat.card balls ‚â§ N
  union_balls : ‚àÄ x ‚àà s, ‚àÉ z ‚àà balls, d x z < r

/- Good first project: state and prove basic properties about `CanBeCoveredByBalls` -/

/- mathlib is missing H√∂lder spaces.
Todo:
* Define H√∂lder spaces
* Define the norm in H√∂lder spaces
* Show that H√∂lder spaces are homogenous -/

/-- A set `ùì†` of (continuous) functions is `(N, M, ŒΩ, Œ≥)`-moderate. -/
class IsModerate (ùì† : Set C(X, ‚ÑÇ)) (N M : ‚Ñù) (ŒΩ : ‚Ñù‚â•0) (Œ≥ : ‚Ñù) : Prop where
  -- should `h` be strict subset?
  localOscillation_le_of_subset {x‚ÇÅ x‚ÇÇ : X} {r‚ÇÅ r‚ÇÇ : ‚Ñù} {f g : C(X, ‚ÑÇ)} (hf : f ‚àà ùì†) (hg : g ‚àà ùì†)
   (h1 : ball x‚ÇÅ r‚ÇÅ ‚äÜ ball x‚ÇÇ r‚ÇÇ) (h2 : r ‚â§ EMetric.diam (univ : Set X)) :
    localOscillation (ball x‚ÇÅ r‚ÇÅ) f g ‚â§ A * (r‚ÇÅ / r‚ÇÇ) ^ (1 / N) * localOscillation (ball x‚ÇÇ r‚ÇÇ) f g
  localOscillation_le_of_superset {x‚ÇÅ x‚ÇÇ : X} {r‚ÇÅ r‚ÇÇ : ‚Ñù} {f g : C(X, ‚ÑÇ)} (hf : f ‚àà ùì†) (hg : g ‚àà ùì†)
   (h1 : ball x‚ÇÅ r‚ÇÅ ‚äÜ ball x‚ÇÇ r‚ÇÇ) (h2 : r ‚â§ EMetric.diam (univ : Set X)) :
    localOscillation (ball x‚ÇÇ r‚ÇÇ) f g ‚â§ A * (r‚ÇÇ / r‚ÇÅ) ^ N * localOscillation (ball x‚ÇÅ r‚ÇÅ) f g
  coverByBalls {x : X} {r Œõ : ‚Ñù} (hŒõ : Œõ > 1) (f : C(X, ‚ÑÇ)) :
    Nonempty <| CoverByBalls (localOscillation (ball x r)) (localOscillationBall (ball x r) f Œõ)
      ‚åäA * Œõ ^ M‚åã‚Çä 1
  norm_integral_le {x : X} {r : ‚Ñù‚â•0} {C : ‚Ñù‚â•0} {œà : X ‚Üí ‚ÑÇ} (hœà : HolderWith C ŒΩ œà)
    [Norm (X ‚Üí ‚ÑÇ)] -- todo: replace this with the actual H√∂lder norm
    (h2œà : tsupport œà ‚äÜ ball x r) {f g : C(X, ‚ÑÇ)} (hf : f ‚àà ùì†) (hg : g ‚àà ùì†) :
    ‚Äñ‚à´ x in ball x r, Complex.exp (i * (f x - g x)) * œà x‚Äñ ‚â§
    A * (volume (ball x r)).toReal * ‚Äñœà‚Äñ * (1 + localOscillation (ball x r) f g) ^ (-Œ≥) * r ^ (ŒΩ : ‚Ñù)


/-- The "volume function". Note that we will need to assume
`IsFiniteMeasureOnCompacts` and `ProperSpace` to actually know that this volume is finite. -/
def ENNReal.vol {X : Type*} [QuasiMetricSpace X A] [MeasureSpace X] (x y : X) : ‚Ñù :=
  ENNReal.toReal (volume (ball x (dist x y)))

/-- `K` is a `œÑ`-Calderon-Zygmund kernel -/
class IsCZKernel (œÑ : ‚Ñù) (K : X ‚Üí X ‚Üí ‚ÑÇ) : Prop where
  nnnorm_le_vol_inv (x y : X) : ‚ÄñK x y‚Äñ ‚â§ (vol x y)‚Åª¬π
  h {x x' y y' : X} (h : A * dist x x' ‚â§ dist x y) :
    ‚ÄñK x y - K x y'‚Äñ ‚â§ (dist y y' / dist x y) ^ œÑ * (vol x y)‚Åª¬π

set_option linter.unusedVariables false in
/-- The associated nontangential Calderon Zygmund operator -/
def ANCZOperator (K : X ‚Üí X ‚Üí ‚ÑÇ) (C : ‚Ñù) (f : X ‚Üí ‚ÑÇ) (x : X) : ‚Ñù :=
  ‚®Ü (r : ‚Ñù) (R : ‚Ñù) (h1 : r < R) (x' : X) (h2 : dist x x' ‚â§ C * r),
  ‚Äñ‚à´ y in {y | r < dist x' y ‚àß dist x' y < R}, K x' y * f y‚Äñ

/- TODO: state theorem 1.2. -/

set_option linter.unusedVariables false in
variable (X) in
class SmallBoundaryProperty (Œ∑ : ‚Ñù) : Prop where
  volume_diff_le : ‚àÉ (C : ‚Ñù‚â•0) (hC : C > 0), ‚àÄ (x : X) r (Œ¥ : ‚Ñù‚â•0), 0 < r ‚Üí 0 < Œ¥ ‚Üí Œ¥ < 1 ‚Üí
    volume (ball x ((1 + Œ¥) * r) \ ball x ((1 - Œ¥) * r)) ‚â§ C * Œ¥ ^ Œ∑ * volume (ball x r)


#print IsCZKernel

/- TODO: state theorem 1.3 and needed definitions. -/
/- TODO: state theorem 1.4 and needed definitions. -/
