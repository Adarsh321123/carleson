import Carleson.HomogeneousType

open MeasureTheory Measure NNReal Metric Complex Set
open scoped ENNReal
noncomputable section


/-! Miscellaneous definitions.
We should move them to separate files once we start proving things about them. -/

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

/-- A quasi metric space with regular/`A`-Lipschitz distance. -/
class Metric.IsRegular (X : Type*) (A : outParam ‚Ñù‚â•0) [fact : Fact (1 ‚â§ A)]
    [PseudoQuasiMetricSpace X A]
  where abs_dist_sub_dist_le : ‚àÄ x y y' : X, |dist x y - dist x y'| ‚â§ A * dist y y'

export Metric.IsRegular (abs_dist_sub_dist_le)

variable {X : Type*} {A : ‚Ñù‚â•0} [fact : Fact (1 ‚â§ A)] [IsSpaceOfHomogeneousType X A]

section localOscillation

set_option linter.unusedVariables false in
/-- A type synonym of `C(X, ‚ÑÇ)` that uses the local oscillation w.r.t. `E` as the metric. -/
def withLocalOscillation (E : Set X) : Type _ := C(X, ‚ÑÇ)

instance withLocalOscillation.toContinuousMapClass (E : Set X) :
    ContinuousMapClass (withLocalOscillation E) X ‚ÑÇ :=
  ContinuousMap.toContinuousMapClass

/-- The local oscillation of two functions. -/
def localOscillation (E : Set X) (f g : withLocalOscillation E) : ‚Ñù :=
  ‚®Ü z : E √ó E, ‚Äñf z.1 - g z.1 - f z.2 + g z.2‚Äñ

/-- The local oscillation on a set `E` gives rise to a pseudo-metric-space structure
  on the continuous functions `X ‚Üí ‚ÑÇ`. -/
instance homogeneousPseudoMetric (E : Set X) : PseudoQuasiMetricSpace (withLocalOscillation E) A where
  dist := localOscillation E
  dist_self := by simp [localOscillation]
  dist_comm := by sorry
  dist_triangle := by sorry
  edist_dist := fun x y => by exact ENNReal.coe_nnreal_eq _

variable {E : Set X} {f g : C(X, ‚ÑÇ)}

def localOscillationBall (E : Set X) (f : C(X, ‚ÑÇ)) (r : ‚Ñù) : Set C(X, ‚ÑÇ) :=
  { g : C(X, ‚ÑÇ) | localOscillation E f g < r }

end localOscillation


/- mathlib is missing H√∂lder spaces.
Todo:
* Define H√∂lder spaces
* Define the norm in H√∂lder spaces
* Show that H√∂lder spaces are homogeneous -/

/-- A set `ùì†` of (continuous) functions is compatible. -/
class IsCompatible (ùì† : Set C(X, ‚ÑÇ)) : Prop where
  localOscillation_two_mul_le {x‚ÇÅ x‚ÇÇ : X} {r : ‚Ñù} {f g : C(X, ‚ÑÇ)} (hf : f ‚àà ùì†) (hg : g ‚àà ùì†)
    (h : dist x‚ÇÅ x‚ÇÇ < 2 * r) :
    localOscillation (ball x‚ÇÇ (2 * r)) f g ‚â§ A * localOscillation (ball x‚ÇÅ r) f g
  localOscillation_le_of_subset {x‚ÇÅ x‚ÇÇ : X} {r : ‚Ñù} {f g : C(X, ‚ÑÇ)} (hf : f ‚àà ùì†) (hg : g ‚àà ùì†)
    (h1 : ball x‚ÇÅ r ‚äÜ ball x‚ÇÇ (A * r)) (h2 : A * r ‚â§ Metric.diam (univ : Set X)) :
    2 * localOscillation (ball x‚ÇÅ r) f g ‚â§ localOscillation (ball x‚ÇÇ (A * r)) f g
  ballsCoverBalls {x : X} {r R : ‚Ñù} :
    BallsCoverBalls (withLocalOscillation (ball x r)) (2 * R) R ‚åäA‚åã‚Çä

export IsCompatible (localOscillation_two_mul_le localOscillation_le_of_subset ballsCoverBalls)

set_option linter.unusedVariables false in
/-- The inhomogeneous Lipschitz norm on a ball (I'm assuming `R` is the radius of the ball?). -/
def iLipNorm (œï : X ‚Üí ‚ÑÇ) (x‚ÇÄ : X) (R : ‚Ñù) : ‚Ñù :=
  (‚®Ü x ‚àà ball x‚ÇÄ R, ‚Äñœï x‚Äñ) + R * ‚®Ü (x : X) (y : X) (h : x ‚â† y), ‚Äñœï x - œï y‚Äñ / nndist x y

/-- ùì† is œÑ-cancellative -/
class IsCancellative (œÑ : ‚Ñù) (ùì† : Set C(X, ‚ÑÇ)) : Prop where
  norm_integral_exp_le {x : X} {r : ‚Ñù} {œï : X ‚Üí ‚ÑÇ} {K : ‚Ñù‚â•0} (h1 : LipschitzWith K œï)
    (h2 : tsupport œï ‚äÜ ball x r) {f g : C(X, ‚ÑÇ)} (hf : f ‚àà ùì†) (hg : g ‚àà ùì†) :
    ‚Äñ‚à´ x in B, exp (i * (f x - g x)) * œï x‚Äñ ‚â§
    A * (volume B).toReal * iLipNorm œï x r * (1 + localOscillation (ball x r) f g) ^ (- œÑ)

export IsCancellative (norm_integral_exp_le)

/-- The "volume function". Note that we will need to assume
`IsFiniteMeasureOnCompacts` and `ProperSpace` to actually know that this volume is finite. -/
def Real.vol {X : Type*} [PseudoQuasiMetricSpace X A] [MeasureSpace X] (x y : X) : ‚Ñù :=
  ENNReal.toReal (volume (ball x (dist x y)))

open Real (vol)

/-- `K` is a one-sided `œÑ`-Calderon-Zygmund kernel -/
class IsCZKernel (œÑ : ‚Ñù) (K : X ‚Üí X ‚Üí ‚ÑÇ) : Prop where
  norm_le_vol_inv (x y : X) : ‚ÄñK x y‚Äñ ‚â§ (vol x y)‚Åª¬π
  norm_sub_le {x x' y y' : X} (h : A * dist x x' ‚â§ dist x y) :
    ‚ÄñK x y - K x y'‚Äñ ‚â§ (dist y y' / dist x y) ^ œÑ * (vol x y)‚Åª¬π

/-- In Mathlib we only have the operator norm for continuous linear maps,
and (I think that) `T_*` is not linear.
Here is the norm for an arbitary map `T` between normed spaces
(the infimum is defined to be 0 if the operator is not bounded). -/
def operatorNorm {E F : Type*} [NormedAddCommGroup E] [NormedAddCommGroup F] (T : E ‚Üí F) : ‚Ñù :=
  sInf { c | 0 ‚â§ c ‚àß ‚àÄ x, ‚ÄñT x‚Äñ ‚â§ c * ‚Äñx‚Äñ }

/-- Instead of the above `operatorNorm`, this might be more appropriate. -/
def NormBoundedBy {E F : Type*} [NormedAddCommGroup E] [NormedAddCommGroup F] (T : E ‚Üí F) (c : ‚Ñù) :
    Prop :=
  ‚àÄ x, ‚ÄñT x‚Äñ ‚â§ c * ‚Äñx‚Äñ

set_option linter.unusedVariables false in
/-- The associated nontangential Calderon Zygmund operator -/
def ANCZOperator (K : X ‚Üí X ‚Üí ‚ÑÇ) (f : X ‚Üí ‚ÑÇ) (x : X) : ‚Ñù :=
  ‚®Ü (R‚ÇÅ : ‚Ñù) (R‚ÇÇ : ‚Ñù) (h1 : R‚ÇÅ < R‚ÇÇ) (x' : X) (h2 : dist x x' ‚â§ R‚ÇÅ),
  ‚Äñ‚à´ y in {y | dist x' y ‚àà Ioo R‚ÇÅ R‚ÇÇ}, K x' y * f y‚Äñ

/-- The associated nontangential Calderon Zygmund operator, viewed as a map `L^p ‚Üí L^p`.
Todo: is `T_*f` indeed in L^p if `f` is? -/
def ANCZOperatorLp (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] (K : X ‚Üí X ‚Üí ‚ÑÇ) (f : Lp ‚ÑÇ p (volume : Measure X)) :
    Lp ‚Ñù p (volume : Measure X) :=
  Mem‚Ñíp.toLp (ANCZOperator K (f : X ‚Üí ‚ÑÇ)) sorry

set_option linter.unusedVariables false in
/-- The (maximally truncated) polynomial Carleson operator `T`. -/
def CarlesonOperator (K : X ‚Üí X ‚Üí ‚ÑÇ) (ùì† : Set C(X, ‚ÑÇ)) (f : X ‚Üí ‚ÑÇ) (x : X) : ‚Ñù :=
  ‚®Ü (Q ‚àà ùì†) (R‚ÇÅ : ‚Ñù) (R‚ÇÇ : ‚Ñù) (h1 : R‚ÇÅ < R‚ÇÇ),
  ‚Äñ‚à´ y in {y | dist x y ‚àà Ioo R‚ÇÅ R‚ÇÇ}, K x y * f y * exp (I * Q y)‚Äñ

variable (X) in
/-- A grid structure on `X`.
I expect we prefer `ùìì : Œπ ‚Üí Set X` over `ùìì : Set (Set X)` -/
structure GridStructure (Œπ : Type*) (D : ‚Ñù) (C : ‚Ñù‚â•0) where
  ùìì : Œπ ‚Üí Set X
  s : Œπ ‚Üí ‚Ñ§
  x : Œπ ‚Üí X
  volume_iUnion_preimage : ‚àÄ œÉ ‚àà range s, volume (‚ãÉ i ‚àà s ‚Åª¬π' {œÉ}, ùìì i)·∂ú = 0
  volume_inter_eq_zero {i j} (h : s i = s j) : volume (ùìì i ‚à© ùìì j) = 0
  fundamental_dyadic {i j} : ùìì i ‚äÜ ùìì j ‚à® ùìì j ‚äÜ ùìì i ‚à® Disjoint (ùìì i) (ùìì j)
  ball_subset {i} : ball (x i) ((2 * A) ^ (-2 : ‚Ñ§) * D ^ s i) ‚äÜ ùìì i
  subset_ball {i} : ùìì i ‚äÜ ball (x i) ((2 * A) ^ 2 * D ^ s i)
  small_boundary {i} {t : ‚Ñù‚â•0} (ht : 0 < t) : volume {x ‚àà ùìì i | infDist x (ùìì i)·∂ú ‚â§ t * D ^ s i } ‚â§
    C * t ^ k * volume (ùìì i)
  -- should the following become axioms? I believe they don't follow from previous axioms.
  -- or maybe √é is only defined when it exists?
  -- next : Œπ ‚Üí Œπ
  -- subset_next {i} : ùìì i ‚äÜ ùìì (next i)
  -- s_next : s (next i) = s i + 1

-- todo: tile structure

instance homogeneousMeasurableSpace [Inhabited X] : MeasurableSpace C(X, ‚ÑÇ) :=
  let m : PseudoQuasiMetricSpace C(X, ‚ÑÇ) A :=
    homogeneousPseudoMetric (ball default 1) -- an arbitary ball
  let t : TopologicalSpace C(X, ‚ÑÇ) := m.toUniformSpace.toTopologicalSpace
  @borel C(X, ‚ÑÇ) t

structure TileStructure [Inhabited X] (ùì† : Set C(X, ‚ÑÇ)) (Œπ : Type*) (ùîì : Type*)
    (D : ‚Ñù) (C : ‚Ñù‚â•0) extends GridStructure X Œπ D C where
  ùìò : ùîì ‚Üí Œπ -- compose with `ùìì` to get the `ùìò` of the paper.
  Œ© : ùîì ‚Üí Set C(X, ‚ÑÇ)
  measurableSet_Œ© : ‚àÄ p, MeasurableSet (Œ© p)
  Q : ùîì ‚Üí C(X, ‚ÑÇ)
  Q_mem : ‚àÄ p, Q p ‚àà ùì†
  union_Œ© {i} : ‚ãÉ (p) (_h : ùìì (ùìò p) = ùìì i), Œ© p = ùì†
  disjoint_Œ© {p p'} (hp : ùìì (ùìò p) = ùìì (ùìò p')) : Disjoint (Œ© p) (Œ© p')
  relative_fundamental_dyadic {p p'} (h : ùìì (ùìò p) ‚äÜ ùìì (ùìò p')) : Disjoint (Œ© p) (Œ© p') ‚à® Œ© p' ‚äÜ Œ© p
  localOscillationBall_subset {p} : localOscillationBall (ùìì (ùìò p)) (Q p) 5‚Åª¬π ‚à© ùì† ‚äÜ Œ© p
  subset_localOscillationBall {p} : Œ© p ‚äÜ localOscillationBall (ùìì (ùìò p)) (Q p) 1

-- #print homogeneousMeasurableSpace
-- #print TileStructure

set_option linter.unusedVariables false in
variable (X) in
class SmallBoundaryProperty (Œ∑ : ‚Ñù) : Prop where
  volume_diff_le : ‚àÉ (C : ‚Ñù‚â•0) (hC : C > 0), ‚àÄ (x : X) r (Œ¥ : ‚Ñù‚â•0), 0 < r ‚Üí 0 < Œ¥ ‚Üí Œ¥ < 1 ‚Üí
    volume (ball x ((1 + Œ¥) * r) \ ball x ((1 - Œ¥) * r)) ‚â§ C * Œ¥ ^ Œ∑ * volume (ball x r)
